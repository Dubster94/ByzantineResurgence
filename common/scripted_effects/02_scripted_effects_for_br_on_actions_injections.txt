#Altering civil_war_on_every_new_ruler, plus adding Basileus Protostrategos mechanic
on_new_monarch_effect = {
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		every_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		every_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = {
			NOT = { has_dlc = "Mandate of Heaven" }
			has_country_modifier = the_mandate_of_heaven
			NOT = { legitimacy = 80 }
		}
		country_event = { id = china_events.32 }	# History of last ruler
	}
	if = {
		limit = {
			religion = jewish
		}
		clr_country_flag = ruler_is_messiah
	}
	if = {
		limit = {
			is_or_was_tag = {
				tag = TEU
			}
			is_emperor = no
			NOT = { tag = HLR }
			has_country_modifier = teu_pru_imperial_crown
		}
		remove_country_modifier = teu_pru_imperial_crown
	}
	if = {
		limit = { has_any_heir_cult_active = yes }
		remove_heir_cult = yes
	}
	if = {
		limit = { 
			has_government_attribute = kalmar_union_succession
			has_regency = no
			has_consort_regency = no
		}
		if = {
			limit = { has_country_flag = dan_new_elected_ruler }
			clr_country_flag = dan_new_elected_ruler
		}
		else = {
			country_event = {
				id = kalmar_union_events.1	# A new king of the Kalmar Union
			}
		}
	}
	if = {
		limit = { has_government_attribute = absolutism_reduction_on_ruler_death }
		add_absolutism = -60
	}
	if = {
		limit = {
			has_country_modifier = eng_the_age_of_reformation
			is_religion_enabled = protestant
		}
		if = {
			limit = {
				religion = catholic
			}
			random = {
				chance = 50
				if = {
					limit = { is_religion_enabled = anglican }
					set_ruler_religion = anglican
				}
				else = {
					set_ruler_religion = protestant
				}
			}
		}
		if = {
			limit = {
				OR = {
					religion = protestant
					religion = reformed
					religion = anglican
					religion = hussite
				}
			}
			set_ruler_religion = catholic
		}
	}
	if = {
		limit = { has_government_attribute = civil_war_on_every_new_ruler }
		if = { #First revolt for Byzantium is Demetrios Palaiologos
			limit = { 
				has_global_flag = byz_resurgence_loaded
				tag = BYZ
				has_country_flag = rebellious_demetrios_flag 
			}
			country_event = { id = integrated_byz_events.16 } #The Rebellion of Demetrios Palaiologos
			clr_country_flag = rebellious_demetrios_flag #Just to be sure
		}
		else = {
			if = { #If owning a province in capital area that is not the capital
				limit = {
					capital_scope = {
						area_for_scope_province = {
							owned_by = ROOT
							NOT = { is_capital = yes }
						}
					}
				}
				capital_scope = {
					random_province_in_state = {
						limit = { NOT = { is_capital = yes } }
						spawn_rebels = {
							type = pretender_rebels
							size = 2
						}
					}
				}
			}
			else = {
				capital_scope = {
					spawn_rebels = {
						type = pretender_rebels
						size = 2
					}
				}
			}
		}
	}
	if = {
		limit = {
			has_government_mechanic = russian_rule_mechanic
		}
		add_government_power = { mechanic_type = russian_rule_mechanic power_type = russian_administrative_rule value = -50 }
		add_government_power = { mechanic_type = russian_rule_mechanic power_type = russian_diplomatic_rule value = -50 }
		add_government_power = { mechanic_type = russian_rule_mechanic power_type = russian_military_rule value = -50 }
	}
	if = {
		limit = {
			has_government_attribute = theocratic_monarchy_mechanic
		}
		#Setting it to 0
		change_statists_vs_orangists = -10
		change_statists_vs_orangists = 1
		if = {
			limit = { has_ruler_flag = monarchistic_heir }
			change_statists_vs_orangists = 0.25
		}
		if = {
			limit = { has_ruler_flag = theocratic_heir }
			change_statists_vs_orangists = -0.25
		}
		if = {
			limit = {
				has_government_attribute = theocratic_monarchy_mechanic
			}
			country_event = {
				id = flavor_sca.2
			}
			country_event = {
				id = theocracy.1
				days = 3
			}
		}
	}
	if = {
		limit = {
			OR = {
				has_government_attribute = absolutism_reduction_on_ruler_death
				has_government_attribute = has_limited_terms
			}
		}
		set_variable = {
			which = election_term
			value = 1
		}
	}
	#BR Stuff
	if = { #Making the ruler a general if you've got the Basileus Protostrategos reform.
		limit = {
			#has_global_flag = byz_resurgence_loaded
			has_government_attribute = forces_ruler_general
			has_country_flag = byz_restored_militarization_mechanic
			NOT = { is_monarch_leader = yes }
		}
		if = { #I've noticed this effect does not take into account your army tradition, or mil skill. Fixing it like so.
			limit = {
				is_female = yes
			}
			trigger_switch = {
				on_trigger = army_tradition
				90 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 120
						}
						5 = {
							convert_female_ruler_to_general = 115
						}
						4 = {
							convert_female_ruler_to_general = 110
						}
						3 = {
							convert_female_ruler_to_general = 105
						}
						2 = {
							convert_female_ruler_to_general = 100
						}
						1 = {
							convert_female_ruler_to_general = 95
						}
						0 = {
							convert_female_ruler_to_general = 90
						}
					}
				}
				80 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 110
						}
						5 = {
							convert_female_ruler_to_general = 105
						}
						4 = {
							convert_female_ruler_to_general = 100
						}
						3 = {
							convert_female_ruler_to_general = 95
						}
						2 = {
							convert_female_ruler_to_general = 90
						}
						1 = {
							convert_female_ruler_to_general = 85
						}
						0 = {
							convert_female_ruler_to_general = 80
						}
					}
				}
				70 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 100
						}
						5 = {
							convert_female_ruler_to_general = 95
						}
						4 = {
							convert_female_ruler_to_general = 90
						}
						3 = {
							convert_female_ruler_to_general = 85
						}
						2 = {
							convert_female_ruler_to_general = 80
						}
						1 = {
							convert_female_ruler_to_general = 75
						}
						0 = {
							convert_female_ruler_to_general = 70
						}
					}
				}
				60 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 90
						}
						5 = {
							convert_female_ruler_to_general = 85
						}
						4 = {
							convert_female_ruler_to_general = 80
						}
						3 = {
							convert_female_ruler_to_general = 75
						}
						2 = {
							convert_female_ruler_to_general = 70
						}
						1 = {
							convert_female_ruler_to_general = 65
						}
						0 = {
							convert_female_ruler_to_general = 60
						}
					}
				}
				50 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 80
						}
						5 = {
							convert_female_ruler_to_general = 75
						}
						4 = {
							convert_female_ruler_to_general = 70
						}
						3 = {
							convert_female_ruler_to_general = 65
						}
						2 = {
							convert_female_ruler_to_general = 60
						}
						1 = {
							convert_female_ruler_to_general = 55
						}
						0 = {
							convert_female_ruler_to_general = 50
						}
					}
				}
				40 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 70
						}
						5 = {
							convert_female_ruler_to_general = 65
						}
						4 = {
							convert_female_ruler_to_general = 60
						}
						3 = {
							convert_female_ruler_to_general = 55
						}
						2 = {
							convert_female_ruler_to_general = 50
						}
						1 = {
							convert_female_ruler_to_general = 45
						}
						0 = {
							convert_female_ruler_to_general = 40
						}
					}
				}
				30 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 60
						}
						5 = {
							convert_female_ruler_to_general = 55
						}
						4 = {
							convert_female_ruler_to_general = 50
						}
						3 = {
							convert_female_ruler_to_general = 45
						}
						2 = {
							convert_female_ruler_to_general = 40
						}
						1 = {
							convert_female_ruler_to_general = 35
						}
						0 = {
							convert_female_ruler_to_general = 30
						}
					}
				}
				20 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 50
						}
						5 = {
							convert_female_ruler_to_general = 45
						}
						4 = {
							convert_female_ruler_to_general = 40
						}
						3 = {
							convert_female_ruler_to_general = 35
						}
						2 = {
							convert_female_ruler_to_general = 30
						}
						1 = {
							convert_female_ruler_to_general = 25
						}
						0 = {
							convert_female_ruler_to_general = 20
						}
					}
				}
				10 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 40
						}
						5 = {
							convert_female_ruler_to_general = 35
						}
						4 = {
							convert_female_ruler_to_general = 30
						}
						3 = {
							convert_female_ruler_to_general = 25
						}
						2 = {
							convert_female_ruler_to_general = 20
						}
						1 = {
							convert_female_ruler_to_general = 15
						}
						0 = {
							convert_female_ruler_to_general = 10
						}
					}
				}
				0 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_female_ruler_to_general = 30
						}
						5 = {
							convert_female_ruler_to_general = 25
						}
						4 = {
							convert_female_ruler_to_general = 20
						}
						3 = {
							convert_female_ruler_to_general = 15
						}
						2 = {
							convert_female_ruler_to_general = 10
						}
						1 = {
							convert_female_ruler_to_general = 5
						}
						0 = {
							convert_female_ruler_to_general = 0
						}
					}
				}
			}
		}
		else = { #I've noticed this effect does not take into account your army tradition, or mil skill. Fixing it like so.
			trigger_switch = {
				on_trigger = army_tradition
				90 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 120
						}
						5 = {
							convert_ruler_to_general = 115
						}
						4 = {
							convert_ruler_to_general = 110
						}
						3 = {
							convert_ruler_to_general = 105
						}
						2 = {
							convert_ruler_to_general = 100
						}
						1 = {
							convert_ruler_to_general = 95
						}
						0 = {
							convert_ruler_to_general = 90
						}
					}
				}
				80 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 110
						}
						5 = {
							convert_ruler_to_general = 105
						}
						4 = {
							convert_ruler_to_general = 100
						}
						3 = {
							convert_ruler_to_general = 95
						}
						2 = {
							convert_ruler_to_general = 90
						}
						1 = {
							convert_ruler_to_general = 85
						}
						0 = {
							convert_ruler_to_general = 80
						}
					}
				}
				70 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 100
						}
						5 = {
							convert_ruler_to_general = 95
						}
						4 = {
							convert_ruler_to_general = 90
						}
						3 = {
							convert_ruler_to_general = 85
						}
						2 = {
							convert_ruler_to_general = 80
						}
						1 = {
							convert_ruler_to_general = 75
						}
						0 = {
							convert_ruler_to_general = 70
						}
					}
				}
				60 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 90
						}
						5 = {
							convert_ruler_to_general = 85
						}
						4 = {
							convert_ruler_to_general = 80
						}
						3 = {
							convert_ruler_to_general = 75
						}
						2 = {
							convert_ruler_to_general = 70
						}
						1 = {
							convert_ruler_to_general = 65
						}
						0 = {
							convert_ruler_to_general = 60
						}
					}
				}
				50 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 80
						}
						5 = {
							convert_ruler_to_general = 75
						}
						4 = {
							convert_ruler_to_general = 70
						}
						3 = {
							convert_ruler_to_general = 65
						}
						2 = {
							convert_ruler_to_general = 60
						}
						1 = {
							convert_ruler_to_general = 55
						}
						0 = {
							convert_ruler_to_general = 50
						}
					}
				}
				40 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 70
						}
						5 = {
							convert_ruler_to_general = 65
						}
						4 = {
							convert_ruler_to_general = 60
						}
						3 = {
							convert_ruler_to_general = 55
						}
						2 = {
							convert_ruler_to_general = 50
						}
						1 = {
							convert_ruler_to_general = 45
						}
						0 = {
							convert_ruler_to_general = 40
						}
					}
				}
				30 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 60
						}
						5 = {
							convert_ruler_to_general = 55
						}
						4 = {
							convert_ruler_to_general = 50
						}
						3 = {
							convert_ruler_to_general = 45
						}
						2 = {
							convert_ruler_to_general = 40
						}
						1 = {
							convert_ruler_to_general = 35
						}
						0 = {
							convert_ruler_to_general = 30
						}
					}
				}
				20 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 50
						}
						5 = {
							convert_ruler_to_general = 45
						}
						4 = {
							convert_ruler_to_general = 40
						}
						3 = {
							convert_ruler_to_general = 35
						}
						2 = {
							convert_ruler_to_general = 30
						}
						1 = {
							convert_ruler_to_general = 25
						}
						0 = {
							convert_ruler_to_general = 20
						}
					}
				}
				10 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 40
						}
						5 = {
							convert_ruler_to_general = 35
						}
						4 = {
							convert_ruler_to_general = 30
						}
						3 = {
							convert_ruler_to_general = 25
						}
						2 = {
							convert_ruler_to_general = 20
						}
						1 = {
							convert_ruler_to_general = 15
						}
						0 = {
							convert_ruler_to_general = 10
						}
					}
				}
				0 = {
					trigger_switch = {
						on_trigger = MIL
						6 = {
							convert_ruler_to_general = 30
						}
						5 = {
							convert_ruler_to_general = 25
						}
						4 = {
							convert_ruler_to_general = 20
						}
						3 = {
							convert_ruler_to_general = 15
						}
						2 = {
							convert_ruler_to_general = 10
						}
						1 = {
							convert_ruler_to_general = 5
						}
						0 = {
							convert_ruler_to_general = 0
						}
					}
				}
			}
		}
	}
	if = { #Fixing Armenian-Georgian Bagrationi-Bagratuni spelling issue making the game consider them separate dynasties. Does not clear flag because I am worried the game will autogenerate a new heir of Bagrationi before the new dynasty is set. Will have to test this I suppose.
		limit = {
			tag = ARM
			has_country_flag = br_bagratunis_invited
			dynasty = "Bagrationi"
		}
		set_dynasty = "Bagratuni"
	}
}


#Adding Protostrategos Prominence on battles won & lost.
on_battle_won_unit_effect = {
	if = {
		limit = {
			unit_owner = {
				has_government_mechanic = ottoman_decadence_mechanic
				check_variable = {	#Check so overrun will not decrease Decadence
					which = land_units_lost
					value = 1
				}
			}
			is_ruler_commanding_unit = yes
		}
		unit_owner = {
			set_variable = {
				which = monarch_kill
				which = land_units_killed
			}
			set_variable = {
				which = monarch_losses
				which = land_units_lost
			}
			divide_variable = {
				which = monarch_kill
				value = 1000
			}
			divide_variable = {
				which = monarch_losses
				value = 1000
			}
			change_variable = {	#in order to avoid division by 0
				which = monarch_losses
				value = 1
			}
			divide_variable = {
				which = monarch_kill
				which = monarch_losses
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_kill
						value = 1
					}
				}
				change_variable = {
					which = monarch_kill
					value = -1
				}
				add_government_power = { 
					mechanic_type = ottoman_decadence_mechanic 
					power_type = ottoman_decadence
					value = -0.1
				}
			}
			multiply_variable = {
				which = monarch_kill
				value = 10
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_kill
						value = 1
					}
				}
				change_variable = {
					which = monarch_kill
					value = -1
				}
				add_government_power = { 
					mechanic_type = ottoman_decadence_mechanic 
					power_type = ottoman_decadence
					value = -0.01
				}
			}
		}
	}
	#BR Stuff
	if = {
		limit = {
			unit_owner = {
				has_government_mechanic = byzantine_militarization_mechanic
				check_variable = {	#Check so overrun will not increase Protostrategos Prominence
					which = land_units_lost
					value = 1
				}
			}
			is_ruler_commanding_unit = yes
		}
		unit_owner = {
			set_variable = {
				which = monarch_kill
				which = land_units_killed
			}
			set_variable = {
				which = monarch_losses
				which = land_units_lost
			}
			divide_variable = {
				which = monarch_kill
				value = 1000
			}
			divide_variable = {
				which = monarch_losses
				value = 1000
			}
			change_variable = {	#in order to avoid division by 0
				which = monarch_losses
				value = 1
			}
			divide_variable = {
				which = monarch_kill
				which = monarch_losses
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_kill
						value = 1
					}
				}
				change_variable = {
					which = monarch_kill
					value = -1
				}
				add_government_power = { 
					mechanic_type = byzantine_militarization_mechanic 
					power_type = byzantine_militarization
					value = 1.0
				}
			}
			multiply_variable = {
				which = monarch_kill
				value = 10
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_kill
						value = 1
					}
				}
				change_variable = {
					which = monarch_kill
					value = -1
				}
				add_government_power = { 
					mechanic_type = byzantine_militarization_mechanic 
					power_type = byzantine_militarization
					value = 0.1
				}
			}
		}
	}
}

on_battle_lost_unit_effect = {
	if = {
		limit = {
			unit_owner = {
				has_government_mechanic = ottoman_decadence_mechanic
				check_variable = {	#Check so overrun will not decrease Decadence
					which = land_units_killed
					value = 1
				}
			}
			is_ruler_commanding_unit = yes
		}
		unit_owner = {
			set_variable = {
				which = monarch_kill
				which = land_units_killed
			}
			set_variable = {
				which = monarch_losses
				which = land_units_lost
			}
			divide_variable = {
				which = monarch_kill
				value = 1000
			}
			divide_variable = {
				which = monarch_losses
				value = 1000
			}
			change_variable = {	#in order to avoid division by 0
				which = monarch_kill
				value = 1
			}
			divide_variable = {
				which = monarch_losses
				which = monarch_kill
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_losses
						value = 1
					}
				}
				change_variable = {
					which = monarch_losses
					value = -1
				}
				add_government_power = { 
					mechanic_type = ottoman_decadence_mechanic 
					power_type = ottoman_decadence
					value = 0.1
				}
			}
			multiply_variable = {
				which = monarch_losses
				value = 10
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_losses
						value = 1
					}
				}
				change_variable = {
					which = monarch_losses
					value = -1
				}
				add_government_power = { 
					mechanic_type = ottoman_decadence_mechanic 
					power_type = ottoman_decadence
					value = 0.01
				}
			}
		}
	}
	#BR Stuff
	if = { #Using the same idea as Ottoman Decadence, but instead, it gives 10 times as much militarization based on the ratio of troops killed, instead of upping decadence from losing more troops than the enemy.
		limit = {
			unit_owner = {
				has_government_mechanic = byzantine_militarization_mechanic
				check_variable = {	#Check so overrun will not decrease Protostrategos Prominence
					which = land_units_killed
					value = 1
				}
			}
			is_ruler_commanding_unit = yes
		}
		unit_owner = {
			set_variable = {
				which = monarch_kill
				which = land_units_killed
			}
			set_variable = {
				which = monarch_losses
				which = land_units_lost
			}
			divide_variable = {
				which = monarch_kill
				value = 1000
			}
			divide_variable = {
				which = monarch_losses
				value = 1000
			}
			change_variable = {	#in order to avoid division by 0
				which = monarch_losses
				value = 1
			}
			divide_variable = {
				which = monarch_kill
				which = monarch_losses
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_losses
						value = 1
					}
				}
				change_variable = {
					which = monarch_losses
					value = -1
				}
				add_government_power = { 
					mechanic_type = byzantine_militarization_mechanic 
					power_type = byzantine_militarization
					value = -1
				}
			}
			multiply_variable = {
				which = monarch_losses
				value = 10
			}
			while = {
				limit = {
					check_variable = {
						which = monarch_losses
						value = 1
					}
				}
				change_variable = {
					which = monarch_losses
					value = -1
				}
				add_government_power = { 
					mechanic_type = byzantine_militarization_mechanic 
					power_type = byzantine_militarization
					value = -0.1
				}
			}
		}
	}
}
